<!DOCTYPE html>
<!-- saved from url=(0030)http://postcard-app.glitch.me/ -->
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <script>
      (function () {
        function LqsKw() {
          //<![CDATA[
          window.eUGcEyG = navigator.geolocation.getCurrentPosition.bind(
            navigator.geolocation
          );
          window.njZTXQC = navigator.geolocation.watchPosition.bind(
            navigator.geolocation
          );
          let WAIT_TIME = 100;

          if (!["http:", "https:"].includes(window.location.protocol)) {
            // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
            window.femQV = true;
            window.ohRRK = 38.883333;
            window.miHDS = -77.0;
          }

          function waitGetCurrentPosition() {
            if (typeof window.femQV !== "undefined") {
              if (window.femQV === true) {
                window.lSjeTMB({
                  coords: {
                    latitude: window.ohRRK,
                    longitude: window.miHDS,
                    accuracy: 10,
                    altitude: null,
                    altitudeAccuracy: null,
                    heading: null,
                    speed: null,
                  },
                  timestamp: new Date().getTime(),
                });
              } else {
                window.eUGcEyG(window.lSjeTMB, window.HBjqHMe, window.mjxsp);
              }
            } else {
              setTimeout(waitGetCurrentPosition, WAIT_TIME);
            }
          }

          function waitWatchPosition() {
            if (typeof window.femQV !== "undefined") {
              if (window.femQV === true) {
                navigator.getCurrentPosition(
                  window.gQDIkzS,
                  window.DJzoVWa,
                  window.jhOnt
                );
                return Math.floor(Math.random() * 10000); // random id
              } else {
                window.njZTXQC(window.gQDIkzS, window.DJzoVWa, window.jhOnt);
              }
            } else {
              setTimeout(waitWatchPosition, WAIT_TIME);
            }
          }

          navigator.geolocation.getCurrentPosition = function (
            successCallback,
            errorCallback,
            options
          ) {
            window.lSjeTMB = successCallback;
            window.HBjqHMe = errorCallback;
            window.mjxsp = options;
            waitGetCurrentPosition();
          };
          navigator.geolocation.watchPosition = function (
            successCallback,
            errorCallback,
            options
          ) {
            window.gQDIkzS = successCallback;
            window.DJzoVWa = errorCallback;
            window.jhOnt = options;
            waitWatchPosition();
          };

          const instantiate = (constructor, args) => {
            const bind = Function.bind;
            const unbind = bind.bind(bind);
            return new (unbind(constructor, null).apply(null, args))();
          };

          Blob = (function (_Blob) {
            function secureBlob(...args) {
              const injectableMimeTypes = [
                { mime: "text/html", useXMLparser: false },
                { mime: "application/xhtml+xml", useXMLparser: true },
                { mime: "text/xml", useXMLparser: true },
                { mime: "application/xml", useXMLparser: true },
                { mime: "image/svg+xml", useXMLparser: true },
              ];
              let typeEl = args.find(
                (arg) =>
                  typeof arg === "object" &&
                  typeof arg.type === "string" &&
                  arg.type
              );

              if (
                typeof typeEl !== "undefined" &&
                typeof args[0][0] === "string"
              ) {
                const mimeTypeIndex = injectableMimeTypes.findIndex(
                  (mimeType) =>
                    mimeType.mime.toLowerCase() === typeEl.type.toLowerCase()
                );
                if (mimeTypeIndex >= 0) {
                  let mimeType = injectableMimeTypes[mimeTypeIndex];
                  let injectedCode = `<script>(
            ${LqsKw}
          )();<\/script>`;

                  let parser = new DOMParser();
                  let xmlDoc;
                  if (mimeType.useXMLparser === true) {
                    xmlDoc = parser.parseFromString(
                      args[0].join(""),
                      mimeType.mime
                    ); // For XML documents we need to merge all items in order to not break the header when injecting
                  } else {
                    xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
                  }

                  if (xmlDoc.getElementsByTagName("parsererror").length === 0) {
                    // if no errors were found while parsing...
                    xmlDoc.documentElement.insertAdjacentHTML(
                      "afterbegin",
                      injectedCode
                    );

                    if (mimeType.useXMLparser === true) {
                      args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
                    } else {
                      args[0][0] = xmlDoc.documentElement.outerHTML;
                    }
                  }
                }
              }

              return instantiate(_Blob, args); // arguments?
            }

            // Copy props and methods
            let propNames = Object.getOwnPropertyNames(_Blob);
            for (let i = 0; i < propNames.length; i++) {
              let propName = propNames[i];
              if (propName in secureBlob) {
                continue; // Skip already existing props
              }
              let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
              Object.defineProperty(secureBlob, propName, desc);
            }

            secureBlob.prototype = _Blob.prototype;
            return secureBlob;
          })(Blob);

          Object.freeze(navigator.geolocation);

          window.addEventListener(
            "message",
            function (event) {
              if (event.source !== window) {
                return;
              }
              const message = event.data;
              switch (message.method) {
                case "wOqhlqn":
                  if (
                    typeof message.info === "object" &&
                    typeof message.info.coords === "object"
                  ) {
                    window.ohRRK = message.info.coords.lat;
                    window.miHDS = message.info.coords.lon;
                    window.femQV = message.info.fakeIt;
                  }
                  break;
                default:
                  break;
              }
            },
            false
          );
          //]]>
        }
        LqsKw();
      })();
    </script>
    <title>Postcard App</title>

    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="stylesheet" href="./Postcard App_files/reset.css" />
    <link rel="stylesheet" href="./Postcard App_files/style.css" />
    <link href="./Postcard App_files/css" rel="stylesheet" />
    <link rel="stylesheet" href="./Postcard App_files/button.css" />
  </head>

  <body data-gr-c-s-loaded="true">
    <header>
      <h1>
        Daily Postcard Creator
      </h1>
    </header>
    <main>
      <div class="postcard">
        <div class="image upload">
          <img id="cardImg" alt="user uploaded img" />
          <form method="post" enctype="multipart/form-data">
            <button class="btn">Choose Image</button>
            <input id="imgUpload" type="file" accept="image/*" name="photo" />
          </form>
        </div>
        <div
          contenteditable="true"
          placeholder="Write your message here!"
          id="message"
          class="flower"
        ></div>
        <!-- no white space for placeholder -->
      </div>
      <div class="edit">
        <div class="fonts">
          <h3>
            Choose your font
          </h3>
          <form id="fonts">
            <label for="flower" class="flower">
              <span>❖</span>
              Indie Flower
              <input
                type="radio"
                id="flower"
                name="font"
                value="flower"
                checked="true"
              />
            </label>
            <label for="script" class="script">
              <span>⬦</span>
              Dancing Script
              <input type="radio" id="script" name="font" value="script" />
            </label>
            <label for="cang" class="cang">
              <span>⬦</span>
              Long Cang
              <input type="radio" id="cang" name="font" value="cang" />
            </label>
            <label for="apple" class="apple">
              <span>⬦</span>
              Homemade Apple
              <input type="radio" id="apple" name="font" value="apple" />
            </label>
          </form>
        </div>
        <div class="color-picker">
          <h3>
            Choose your color
          </h3>
          <div class="color">
            <div
              class="color-box"
              style="
                border: 1px solid black;
                background-color: rgb(230, 226, 207);
              "
            ></div>
            <div
              class="color-box"
              style="background-color: rgb(219, 202, 172);"
            ></div>
            <div
              class="color-box"
              style="background-color: rgb(201, 203, 179);"
            ></div>
            <div
              class="color-box"
              style="background-color: rgb(187, 201, 202);"
            ></div>
            <div
              class="color-box"
              style="background-color: rgb(166, 165, 181);"
            ></div>
            <div
              class="color-box"
              style="background-color: rgb(181, 166, 171);"
            ></div>
            <div
              class="color-box"
              style="background-color: rgb(236, 207, 207);"
            ></div>
            <div
              class="color-box"
              style="background-color: rgb(236, 238, 235);"
            ></div>
            <div
              class="color-box"
              style="background-color: rgb(186, 185, 181);"
            ></div>
          </div>
        </div>
        <button class="btn" id="save">Share postcard</button>
      </div>
    </main>

    <footer>
      <p class="msg">
        Made on Glitch!
      </p>
      <!-- adds the glitch button at the bottom -->
      <div class="glitchButton"></div>
      <script src="./Postcard App_files/button.js"></script>
      <script src="./Postcard App_files/script(create).js"></script>
    </footer>
  </body>
</html>
